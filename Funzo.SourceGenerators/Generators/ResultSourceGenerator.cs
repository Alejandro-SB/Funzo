using Funzo.SourceGenerators.Generators.Results;
using Funzo.SourceGenerators.Helpers;
using Microsoft.CodeAnalysis;
using System;

namespace Funzo.SourceGenerators.Generators;

internal class ResultSourceGenerator : SourceGeneratorBase
{
    internal override string? GetSource(SourceProductionContext context, SymbolWithAttribute symbolWithAttribute)
    {
        if (HasErrors(context, symbolWithAttribute))
        {
            return null;
        }

        var isSimpleResult = symbolWithAttribute.TypeArguments.Length == 1;

        Results.ResultGenerator generator = isSimpleResult
            ? new Result1AritySourceGenerator(symbolWithAttribute)
            : new Result2AritySourceGenerator(symbolWithAttribute);

        var source = $@"// <auto-generated />

namespace {symbolWithAttribute.Symbol.ContainingNamespace.ToDisplayString()}
{{
    {generator.ClassDefinition}
    {{
        {generator.OkConstructor}
        {generator.OkStaticHelper}
        {generator.OkImplicitConverter}
        {generator.ErrConstructor}
        {generator.ErrStaticHelper}
        {generator.ErrImplicitConverter}
    }}
}}";

        return source;
    }

    private bool HasErrors(SourceProductionContext context, SymbolWithAttribute symbolWithAttribute)
    {
        var (ClassSymbol, _) = symbolWithAttribute;
        if (!ClassSymbol.ContainingSymbol.Equals(ClassSymbol.ContainingNamespace, SymbolEqualityComparer.Default))
        {
            CreateDiagnosticError(context, FunzoDiagnosticDescriptors.Result.TopLevelError, ClassSymbol);
            return true;
        }

        if (ClassSymbol.BaseType is not null && ClassSymbol.BaseType.Name != "Object")
        {
            CreateDiagnosticError(context, FunzoDiagnosticDescriptors.Result.WrongBaseType, ClassSymbol);
            return true;
        }

        foreach (var typeSymbol in symbolWithAttribute.TypeArguments)
        {
            if (typeSymbol.Name == nameof(Object))
            {
                CreateDiagnosticError(context, FunzoDiagnosticDescriptors.Result.ObjectNotValidType, ClassSymbol);
                return true;
            }
        }

        return false;
    }
}
